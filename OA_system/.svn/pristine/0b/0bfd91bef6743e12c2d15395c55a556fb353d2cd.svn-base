package com.web;

import com.bean.Log;
import com.bean.Role;
import com.bean.RoleMenuKey;
import com.github.pagehelper.PageInfo;
import com.service.LogService;
import com.service.MenuService;
import com.service.RoleMenuService;
import com.service.RoleService;
import com.util.LogUtil;
import com.util.RoleExcelUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletResponse;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

@Controller
public class RoleController {
    @Autowired
    private RoleService roleService;
    @Autowired
    private MenuService menuService;
    @Autowired
    private RoleMenuService roleMenuService;
    @Autowired
    private LogService logService;

    @RequestMapping("/resource/system/role/getallrole")
    public String findallrole(String rolename,
                              @RequestParam(value = "index",defaultValue = "1") int index,
                              @RequestParam(value = "size", defaultValue = "5") int size, ModelMap map){
        PageInfo pageInfo = roleService.getallrole(index, size, rolename);
        map.put("pi",pageInfo);
        map.put("name",rolename);
        return "/resource/system/role/list";
    }

    /**
     * 修改角色状态操作
     * @param role
     * @return
     */
    @RequestMapping("/resource/system/role/edit")
    public String edit(Role role, Log log){
        Log log1 = LogUtil.setterLog(log, "无", "修改角色的状态");
        //插入进log表单
        logService.insertSelective(log1);
        roleService.updateByPrimaryKeySelective(role);
        return "redirect:/resource/system/role/getallrole" ;
    }

    /**
     * 准备修改
     * @param map
     * @param roleid
     * @return
     */
    @RequestMapping("/resource/system/role/readyedit")
    public String readyedit(ModelMap map, int roleid){
        //查找menu菜单
        PageInfo pageInfo = menuService.findmenu(1, 1110, null);
        Role role = roleService.selectByPrimaryKey(roleid);
        List<RoleMenuKey> menuKeys = roleMenuService.getrolemenubyid(roleid);
        map.put("pi",pageInfo);
        map.put("role",role);
        map.put("menuid",menuKeys);
        return "/resource/system/role/edit";
    }

    /**
     * 修改角色
     * @param role
     * @param menuid
     * @param remark1
     * @param log
     * @return
     */
    @RequestMapping("/resource/system/role/editjuese")
    public String editjuese(Role role,int[] menuid, String remark1, Log log){
        log.setRemark(remark1);
        Log log1 = LogUtil.setterLog(log);
        //插入进log表单
        logService.insertSelective(log1);
        //更新role表格
        int i = roleService.updateByPrimaryKeySelective(role);
        int roleid = role.getId();
        //删除role_menu中的权限设置，删除之前查询是否有值
        List<RoleMenuKey> li = roleMenuService.getrolemenubyid(roleid);
        if (!li.isEmpty()){
            roleMenuService.deleteByPrimaryKey1(roleid);
        }
        //添加中间表  添加之前判断是否有值
        if (menuid.length > 0){
            roleMenuService.insertarray(roleid,menuid);
        }
        return "redirect:/loginout";
    }

    /**
     * 增加之前准备
     * @param map
     * @return
     */
    @RequestMapping("/resource/system/role/readyadd")
    public String readyadd(ModelMap map){
        //查找menu菜单
        PageInfo pageInfo = menuService.findmenu(1, 1110, null);
        map.put("pi",pageInfo);
        return "/resource/system/role/add";
    }

    /**
     * 添加role角色
     * @param role
     * @param menuid
     * @param remark1
     * @param log
     * @return
     */
    @RequestMapping("/resource/system/role/addroleangmenu")
    public String addrole(Role role, int[] menuid, String remark1, Log log){
        log.setRemark(remark1);
        Log log1 = LogUtil.setterLog(log);
        //插入进log表单
        logService.insertSelective(log1);


        roleService.insertSelective(role,menuid);
        return "redirect:/resource/system/role/getallrole";
    }

    /**
     * 删除一个
     * @param roleid
     * @return
     */
    @RequestMapping("/resource/system/role/deleteone")
    public void deleteone(int roleid, HttpServletResponse response,String username){
        Log log = LogUtil.setterLog(username, "无", "删除一个角色");
        logService.insertSelective(log);
        response.setContentType("text/html;charset=utf-8");
        try {
            PrintWriter out=response.getWriter();
            int k=roleService.deleteByPrimaryKey(roleid);
            if(k>0){
                out.print("<script>alert('删除成功');location.href='/resource/system/role/getallrole';</script>");
            }else{
                out.print("<script>alert('删除失败，请先删除角色下的用户');location.href='/resource/system/role/getallrole';</script>");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    @RequestMapping("/resource/system/role/deletes")
    public void deletes(int[] single, HttpServletResponse response){
        System.out.println(single.length);
        for (int i = 0; i < single.length; i++) {
            roleService.deleteByPrimaryKey(single[i]);
        }
        response.setContentType("text/html;charset=utf-8");
        try {
            PrintWriter out=response.getWriter();
            out.print("<script>alert('删除完成，角色下有用户的未删除');location.href='/resource/system/role/getallrole';</script>");
        } catch (IOException e) {
            e.printStackTrace();
        }


    }

    @RequestMapping("/resource/system/role/daochuExcel")
    public void daochu(int[] single,HttpServletResponse response){
        List<Role> list = roleService.findrolebyarray(single);

        RoleExcelUtil.headers = new String[]{"id","角色名称","描述","状态"};
        RoleExcelUtil.createhead(4);
        RoleExcelUtil.createother(list);
        SimpleDateFormat simpleDateFormat=new SimpleDateFormat("yyyyMMddhhmmss");
        String date= simpleDateFormat.format(new Date());
        FileOutputStream outputStream = null;
        try {
            outputStream = new FileOutputStream("f:\\role" + date + ".xls");
            RoleExcelUtil.export(outputStream);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }finally {
            try {
                outputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        response.setContentType("text/html;charset=utf-8");
        try {
            PrintWriter out2=response.getWriter();
            out2.print("<script>alert('导出成功');location.href='/resource/system/role/getallrole'</script>");
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    @RequestMapping("/resource/system/role/lookrole")
    public String lookrole(int id,ModelMap map){
        Role role = roleService.selectByPrimaryKey(id);
        List<RoleMenuKey> keys = roleMenuService.getrolemenubyid(id);
        PageInfo menus = menuService.findmenu(1, 1000, null);
        map.put("role",role);
        map.put("middle",keys);
        map.put("menu",menus);

        return "/resource/system/role/look";
    }
}
